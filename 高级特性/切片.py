L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']

L[0:3]
# ['Michael', 'Sarah', 'Tracy']
# L[0:3]表示，从索引0开始取，直到索引3为止，
# 但不包括索引3。即索引0，1，2，正好是3个元素。

# 如果第一个索引是0，还可以省略：
L[:3]
# ['Michael', 'Sarah', 'Tracy']

# 也可以从索引1开始，取出2个元素出来：

L[1:3]
# ['Sarah', 'Tracy']

# 类似的，既然Python支持L[-1]取倒数第一个元素，
# 那么它同样支持倒数切片，试试：
L[-2:]
# ['Bob', 'Jack']
L[-2:-1]
# ['Bob']

# 记住倒数第一个元素的索引是-1。

# 将列表从最后一个元素开始重新排列
print(L[::-1])

L=list(range(100))
L
# [0,1,2,3,4,5,...,99]
# 前十个数
L[:10]
# [0,1,2,3,4,5,6,7,8,9]

# 后十个数
L[-10:]
# [90,91,92,93,94,95,96,97,98,99]

# 前11-20个数：
L[10:20]
# [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

# 前10个数，每两个取一个：
L[:10:2]
# [0, 2, 4, 6, 8]

# 所有数，每5个取一个：
L[::5]
# [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]

# 原样复制一个list：
L[:]
# [0, 1, 2, 3, ..., 99]


# tuple也是一种list，唯一区别是tuple不可变。
# 因此，tuple也可以用切片操作，只是操作的结果仍是tuple：
(0,1,2,3,4,5)[:3]
# (0,1,2)


# 字符串'xxx'也可以看成是一种list，每个元素就是一个字符。
# 因此，字符串也可以用切片操作，只是操作结果仍是字符串：
'ABCDEFG'[:3]
# 'ABC'
'ABCDEFG'[::2]
# 'ACEG'


# 在很多编程语言中，
# 针对字符串提供了很多各种截取函数（例如，substring），
# 其实目的就是对字符串切片。
# Python没有针对字符串的截取函数，
# 只需要切片一个操作就可以完成，非常简单。



# 小结
# 有了切片操作，很多地方循环就不再需要了。
# Python的切片非常灵活，
# 一行代码就可以实现很多行循环才能完成的操作。



# 练习
# 利用切片操作，实现一个trim()函数，去除字符串首尾的空格，
# 注意不要调用str的strip()方法：
# def trim(s):
#     return s
# 测试:
# if trim('hello  ') != 'hello':
#     print('测试失败!')
# elif trim('  hello') != 'hello':
#     print('测试失败!')
# elif trim('  hello  ') != 'hello':
#     print('测试失败!')
# elif trim('') != '':
#     print('测试失败!')
# elif trim('    ') != '':
#     print('测试失败!')
# else:
#     print('测试成功!')

def trim(s):
    if(len(s) == 0 or (s[0] != ' ' and s[-1] != ' ')):
        return s
    elif s[0] == ' ':
        return trim(s[1:])
    else:
        return trim(s[:-1])

# 测试:
if trim('hello  ') != 'hello':
    print('测试失败!')
elif trim('  hello') != 'hello':
    print('测试失败!')
elif trim('  hello  ') != 'hello':
    print('测试失败!')
elif trim('') != '':
    print('测试失败!')
elif trim('    ') != '':
    print('测试失败!')
else:
    print('测试成功!')